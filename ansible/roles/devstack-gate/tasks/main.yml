---

- name: Check if we have an SSH key for the root user
  stat: path="/root/.ssh/id_rsa"
  register: has_root_ssh_key
  become: yes

- name: Setup a throwaway SSH key for root user
  command: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
  become: yes
  when: has_root_ssh_key.stat.exists == False

- name: Preserve authorized_keys file for root user
  command: cp ~root/.ssh/authorized_keys ~root/
  ignore_errors: true
  become: yes

- name: Update apt cache
  # Only run "update_cache=yes" if the last one is more than 3600 seconds ago
  apt: update_cache=yes cache_valid_time=3600
  become: yes


- name: Install packages needed for devstack-gate
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - aptitude                  # Useful program
    - bridge-utils
    - docker.io                 # Install docker, so proxy settings get setup (if needed)
    - ebtables
    - gdb                       # To support debugging
    - jq                        # For JSON parsing
    - libffi-dev                # Ansible compilation
    - libssl-dev                # Ansible compilation
    - python-dev                # Ansible compilation
  become: yes

- name: Check if we have a /opt/git/pip-cache/
  stat: path="/opt/git/pip-cache"
  register: has_pip_cache

- name: Create /root/.cache/pip/ directory
  file: path=/root/.cache/pip state=directory mode=0755 recurse=yes
  when: has_pip_cache.stat.exists == True
  become: yes

- name: rsync the pip cache
  command: rsync -rlptDH --exclude=selfcheck.json /opt/git/pip-cache/ /root/.cache/pip/
  when: has_pip_cache.stat.exists == True
  become: yes

- name: Clone openstack-infra/system-config
  git: dest=/root/system-config repo="https://github.com/openstack-infra/system-config"
  become: yes

- name: Run system-config/install_puppet.sh
  shell: /root/system-config/install_puppet.sh
  become: yes

- name: Run system-config/install_modules.sh
  shell: /root/system-config/install_modules.sh
  become: yes

- name: Run puppet apply
  shell: >
    puppet apply --modulepath=/root/system-config/modules:/etc/puppet/modules
    -e "class { openstack_project::single_use_slave: install_users => false, enable_unbound => false, ssh_key => \"$( cat ~/.ssh/id_rsa.pub | awk '{print $2}' )\" }"
  become: yes

# Recommend to NOT add the user 'stack' as it can make things break.
# The 'jenkins' user/group should have already been created by the
# 'puppet apply' command, but just in case.
#
# The puppet process changes it so that root can not login. Set it up so we can
# (hopefully) login as 'jenkins' or 'backdoor' users.
- name: Create user groups
  group:
    name: "{{item}}"
    state: present
  become: yes
  with_items: '{{users}}'

- name: Create users
  user:
    name: "{{item}}"
    group: "{{item}}"
    state: present
    shell: /bin/bash
  become: yes
  with_items: '{{users}}'

- name: Ensure users can sudo without password
  template:
    src: user-sudoers.j2
    dest: "/etc/sudoers.d/{{ item }}"
    owner: root
    group: root
    mode: 0440
  become: yes
  with_items: '{{users}}'

- name: Delete any existing SSH public keys
  # Had case where the existing file was wonky, so lets just delete them if
  # they exist
  file: path="/home/{{item}}/.ssh/authorized_keys" state=absent
  with_items: '{{users}}'
  become: yes

- name: Check if we have a ~/.ssh/id_rsa.pub file
  stat: path="~/.ssh/id_rsa.pub"
  register: has_ssh_pub_file

- name: Add our SSH public key to the users
  authorized_key:
    user: "{{item}}"
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  with_items: '{{users}}'
  when: has_ssh_pub_file.stat.exists == True
  become: yes

- name: Put backup of authorized_keys on our users
  shell: cat ~root/authorized_keys >> "/home/{{item}}/.ssh/authorized_keys"
  ignore_errors: true
  become: yes
  with_items: '{{users}}'

- name: Create directories
  # file: path={{item.path|expanduser}} state=directory mode={{item.mode}} owner={{item.owner|default(omit)}} group={{item.group|default(omit)}}
  file: path={{item.path|expanduser}} state=directory mode={{item.mode}} owner={{item.owner}} group={{item.group}}
  with_items: '{{dirs_to_create}}'
  become: yes

- name: Copy files
  # copy: src={{item.src}} dest={{item.dest|expanduser}} mode={{item.mode}} owner={{item.owner|default(omit)}} group={{item.group|default(omit)}}
  copy: src={{item.src}} dest={{item.dest|expanduser}} mode={{item.mode}} owner={{item.owner}} group={{item.group}}
  with_items: '{{files_to_copy}}'
  become: yes

- name: Setup skeleton files, vimrc, etc...
  copy:
    src: etc/skel/
    dest: "/home/{{item}}/"
  become: yes
  become_user: "{{ item }}"
  with_items:
    - jenkins
    - root
